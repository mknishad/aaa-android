def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "com.ascenttek.aaa.aaa"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.ascenttek.aaa.aaa"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    applicationVariants.all {
            // this method is used to rename all apk whether
            // it may be signed or unsigned(debug apk)
        variant ->
            variant.outputs.each {
                    // on below line we are setting a name to our apk
                output ->
                    // on below line we are specifying our app name.
                    project.ext { appName = 'aaa' }
                    // on below line we are adding the formatted date to our apk file name.
                    def formattedDate = new Date().format('yyyy-MM-dd-HH-mm-ss')
                    // on below line we are creating a new name for our apk.
                    def newName = output.outputFile.name
                    // on below line we are replacing our previous name with our app name.
                    newName = newName.replace("app-", "$project.ext.appName-")
                    // on below line we are replacing -debug with our formatted date.
                    newName = newName.replace("-debug", "-debug-" + "v" + variant.versionName + "(" + variant.versionCode + ")-" + formattedDate)
                    // on below line we are replacing -release with our formatted date.
                    newName = newName.replace("-release", "-release-" + "v" + variant.versionName + "(" + variant.versionCode + ")-" + formattedDate)
                    // at last we are setting our apk name to it.
                    output.outputFileName = newName
            }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
